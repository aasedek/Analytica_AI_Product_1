"use client";

import React, { useState, useTransition } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Icons } from "@/components/icons";
import { getAIExecution } from "@/app/actions";
import type { PipelineNode, PipelineConnection } from "@/lib/types";
import { useToast } from "@/hooks/use-toast";
import { ScrollArea } from "../ui/scroll-area";
import { Play } from "lucide-react";

interface AIExecutorDialogProps {
  pipeline: {
    nodes: PipelineNode[];
    connections: PipelineConnection[];
  };
}

export function AIExecutorDialog({ pipeline }: AIExecutorDialogProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isPending, startTransition] = useTransition();
  const [result, setResult] = useState<{ executionPlan: string } | null>(null);
  const { toast } = useToast();

  const handleRun = () => {
    const formData = new FormData();
    const pipelineString = JSON.stringify(pipeline, null, 2);
    formData.set("pipelineConfiguration", pipelineString);
    setResult(null);

    startTransition(async () => {
      const res = await getAIExecution(formData);
      if (res.executionPlan.includes("error") || res.executionPlan.includes("Invalid input")) {
        toast({
          title: "Execution Error",
          description: res.executionPlan,
          variant: "destructive",
        });
        setResult(null);
      } else {
        setResult(res);
      }
    });
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={(open) => {
      setIsOpen(open);
      if (!open) setResult(null);
    }}>
      <DialogTrigger asChild>
        <Button size="sm">
          <Play className="mr-2 h-4 w-4" />
          Run
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
          <DialogHeader>
            <DialogTitle>Run Pipeline</DialogTitle>
            <DialogDescription>
              Execute the pipeline to see the step-by-step plan generated by AI.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
             {isPending && (
              <div className="flex items-center justify-center rounded-md border border-dashed p-8">
                <Icons.bot className="mr-2 h-6 w-6 animate-spin" />
                <p>Generating execution plan...</p>
              </div>
            )}
            {result && (
              <div className="mt-4 rounded-md border bg-secondary/50 p-4">
                <ScrollArea className="h-[300px]">
                <h4 className="font-semibold text-lg mb-2">Execution Plan</h4>
                <div className="prose prose-sm max-w-none text-foreground" dangerouslySetInnerHTML={{ __html: result.executionPlan.replace(/\n/g, '<br />') }}/>
                </ScrollArea>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button onClick={handleRun} disabled={isPending}>
              {isPending ? "Running..." : "Run Workflow"}
            </Button>
          </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
